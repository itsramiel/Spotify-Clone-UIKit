import UIKit

class FeaturedPlaylistCollectionViewCell: UICollectionViewCell {
    static let identifier = "FeaturedPlaylistCollectionViewCell"

    private static let PADDING: CGFloat = 4
    private static let PLAYLIST_COVER_IMAGE_SIZE: CGFloat = 160
    private static let PLAYLIST_NAME_NUMBER_OF_LINES = 2
    private static let PLAYLIST_NAME_FONT_SIZE: CGFloat = 18
    private static let CREATOR_NAME_NUMBER_OF_LINES = 2
    private static let CREATOR_NAME_FONT_SIZE: CGFloat = 14

    static let WIDTH: CGFloat =
        PLAYLIST_COVER_IMAGE_SIZE + PADDING * 2

    static let PLAYLIST_NAME_HEIGHT: CGFloat =
        UIFont.systemFont(ofSize: PLAYLIST_NAME_FONT_SIZE).lineHeight * CGFloat(PLAYLIST_NAME_NUMBER_OF_LINES)

    static let CREATOR_NAME_HEIGHT: CGFloat =
        UIFont.systemFont(ofSize: CREATOR_NAME_FONT_SIZE).lineHeight * CGFloat(CREATOR_NAME_NUMBER_OF_LINES)

    static let ESTIMATED_HEIGHT: CGFloat =
        PLAYLIST_COVER_IMAGE_SIZE +
        PLAYLIST_NAME_HEIGHT + CREATOR_NAME_HEIGHT
        + PADDING * 2

    private let playlistCoverImageView: UIImageView = {
        let imageView = UIImageView()
        imageView.contentMode = .scaleAspectFill

        return imageView
    }()

    private let playlistNameLabel: UILabel = {
        let label = UILabel()
        label.numberOfLines = PLAYLIST_NAME_NUMBER_OF_LINES
        label.font = .systemFont(ofSize: PLAYLIST_NAME_FONT_SIZE, weight: .semibold)
        // label.setContentHuggingPriority(.defaultHigh, for: .vertical)
        // label.setContentCompressionResistancePriority(.defaultLow, for: .vertical)

        return label
    }()

    private let creatorNameLabel: UILabel = {
        let label = UILabel()
        label.numberOfLines = CREATOR_NAME_NUMBER_OF_LINES
        label.font = .systemFont(ofSize: CREATOR_NAME_FONT_SIZE, weight: .semibold)

        return label
    }()

    private let footerStack: UIStackView = {
        let stack = UIStackView()
        stack.axis = .vertical
        stack.spacing = 4
        stack.alignment = .leading
        stack.distribution = .fill
        stack.setContentHuggingPriority(.defaultHigh, for: .vertical)

        return stack
    }()

    private let trailingView: UIStackView = {
        let stackView = UIStackView()
        stackView.axis = .vertical
        stackView.spacing = 4
        stackView.alignment = .leading
        stackView.distribution = .equalSpacing

        return stackView
    }()

    override init(frame: CGRect) {
        super.init(frame: frame)

        contentView.backgroundColor = .red
        contentView.addSubview(playlistCoverImageView)
        contentView.addSubview(trailingView)

        mainStack.addArrangedSubview(creatorNameLabel)

        trailingView.addArrangedSubview(playlistNameLabel)
        trailingView.addArrangedSubview(mainStack)

        contentView.clipsToBounds = true
        setUpConstraints()
    }

    @available(*, unavailable)
    required init?(coder _: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    func setUpConstraints() {
        playlistCoverImageView.translatesAutoresizingMaskIntoConstraints = false
        trailingView.translatesAutoresizingMaskIntoConstraints = false

        NSLayoutConstraint.activate([
            playlistCoverImageView.leftAnchor.constraint(equalTo: contentView.leftAnchor, constant: FeaturedPlaylistCollectionViewCell.PADDING),
            playlistCoverImageView.topAnchor.constraint(equalTo: contentView.topAnchor, constant: FeaturedPlaylistCollectionViewCell.PADDING),
            playlistCoverImageView.heightAnchor.constraint(equalToConstant: contentView.frame.height - FeaturedPlaylistCollectionViewCell.PADDING * 2),
            playlistCoverImageView.widthAnchor.constraint(equalTo: playlistCoverImageView.heightAnchor),

            trailingView.leftAnchor.constraint(equalTo: playlistCoverImageView.rightAnchor, constant: FeaturedPlaylistCollectionViewCell.PADDING),
            trailingView.topAnchor.constraint(equalTo: contentView.topAnchor, constant: FeaturedPlaylistCollectionViewCell.PADDING),
            trailingView.rightAnchor.constraint(equalTo: contentView.rightAnchor, constant: -FeaturedPlaylistCollectionViewCell.PADDING),
            trailingView.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -FeaturedPlaylistCollectionViewCell.PADDING)
        ])
    }

    override func prepareForReuse() {
        super.prepareForReuse()
        playlistNameLabel.text = nil
        creatorNameLabel.text = nil
        playlistCoverImageView.image = nil
    }

    func configure(with viewModel: FeaturedPlaylistCellViewModel) {
        playlistNameLabel.text = viewModel.name
        creatorNameLabel.text = viewModel.creatorName
        playlistCoverImageView.sd_setImage(with: viewModel.artworkURL)
    }
}
